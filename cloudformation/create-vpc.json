{
  "Parameters": {
    "Environment": {
      "Type": "String",
      "Description": "The environment resources are going to be launched in"
    },
    "Ec2LaunchTemplateName": {
      "Type": "String",
      "Description": "The name of the EC2 Launch Template to create"
    },
    "Route53PrivateHostedZoneName": {
      "Type": "String",
      "Description": "The Route 53 private hosted zone name, e.g. zookeepers.demo."
    },
    "ZookeeperNodeClientPort": {
      "Type": "String",
      "Description": "The port exposed by ZookeeperNode for clients to connect."
    },
    "ZookeeperNodeElectionPort": {
      "Type": "String",
      "Description": "The port exposed by ZookeeperNode for the Election process."
    },
    "ZookeeperNodeLeaderPort": {
      "Type": "String",
      "Description": "The port exposed by ZookeeperNode for the Leader communication process."
    }
  },
  "Resources": {
    "VPC1": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsSupport": true,
        "EnableDnsHostnames": true,
        "Tags": [
          {
            "Key": "Name",
            "Value": "VPC-1"
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "Environment"
            }
          }
        ]
      }
    },
    "SecurityGroup1": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupName": "ssh-only-all-input-sources",
        "GroupDescription": "Allows only SSH at port 22 from any input source, public or private",
        "SecurityGroupIngress": {
          "CidrIp": "0.0.0.0/0",
          "Description": "Any public or private IP",
          "FromPort": 22,
          "IpProtocol": "TCP",
          "ToPort": 22
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "ssh-only-all-input-sources"
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "Environment"
            }
          }
        ],
        "VpcId": {
          "Ref": "VPC1"
        }
      }
    },
    "SecurityGroupZookeeperElectionAndLeaderPorts": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupName": "zookeepers-election-and-leader-ports",
        "GroupDescription": "Allows TCP traffic in election and leader ports",
        "Tags": [
          {
            "Key": "Name",
            "Value": "zookeepers-election-and-leader-ports"
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "Environment"
            }
          }
        ],
        "VpcId": {
          "Ref": "VPC1"
        }
      }
    },
    "SecurityGroupZookeeperElectionPortIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "Description": "Ingress rule to allow election port for zookeepers.",
        "FromPort": {"Ref": "ZookeeperNodeElectionPort"},
        "GroupId": {"Ref": "SecurityGroupZookeeperElectionAndLeaderPorts"},
        "IpProtocol": "TCP",
        "SourceSecurityGroupId": {"Ref": "SecurityGroupZookeeperElectionAndLeaderPorts"},
        "ToPort": {"Ref": "ZookeeperNodeElectionPort"}
      }
    },
    "SecurityGroupZookeeperLeaderPortIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "Description": "Ingress rule to allow election and leader ports for zookeepers.",
        "FromPort": {"Ref": "ZookeeperNodeLeaderPort"},
        "GroupId": {"Ref": "SecurityGroupZookeeperElectionAndLeaderPorts"},
        "IpProtocol": "TCP",
        "SourceSecurityGroupId": {"Ref": "SecurityGroupZookeeperElectionAndLeaderPorts"},
        "ToPort": {"Ref": "ZookeeperNodeLeaderPort"}
      }
    },
    "SecurityGroupZookeeperElectionPortEgress": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "Description": "Egress rule to allow election port for zookeepers.",
        "DestinationSecurityGroupId": {"Ref": "SecurityGroupZookeeperElectionAndLeaderPorts"},
        "FromPort": {"Ref": "ZookeeperNodeElectionPort"},
        "GroupId": {"Ref": "SecurityGroupZookeeperElectionAndLeaderPorts"},
        "IpProtocol": "TCP",
        "ToPort": {"Ref": "ZookeeperNodeElectionPort"}
      }
    },
    "SecurityGroupZookeeperLeaderPortEgress": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "Description": "Egress rule to allow election and leader ports for zookeepers.",
        "DestinationSecurityGroupId": {"Ref": "SecurityGroupZookeeperElectionAndLeaderPorts"},
        "FromPort": {"Ref": "ZookeeperNodeLeaderPort"},
        "GroupId": {"Ref": "SecurityGroupZookeeperElectionAndLeaderPorts"},
        "IpProtocol": "TCP",
        "ToPort": {"Ref": "ZookeeperNodeLeaderPort"}
      }
    },
    "SecurityGroupZookeeperClientPort": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupName": "zookeepers-client-port",
        "GroupDescription": "Allows TCP traffic in client port of zookeeper node.",
        "Tags": [
          {
            "Key": "Name",
            "Value": "zookeepers-client-port"
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "Environment"
            }
          }
        ],
        "VpcId": {
          "Ref": "VPC1"
        }
      }
    },
    "SecurityGroupZookeeperClientPortIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "Description": "Ingress rule to allow client port for zookeepers.",
        "FromPort": {"Ref": "ZookeeperNodeClientPort"},
        "GroupId": {"Ref": "SecurityGroupZookeeperClientPort"},
        "IpProtocol": "TCP",
        "SourceSecurityGroupId": {"Ref": "SecurityGroupZookeeperClientPort"},
        "ToPort": {"Ref": "ZookeeperNodeClientPort"}
      }
    },
    "SecurityGroupZookeeperClientPortEgress": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "Description": "Egress rule to allow client port for zookeepers.",
        "DestinationSecurityGroupId": {"Ref": "SecurityGroupZookeeperClientPort"},
        "FromPort": {"Ref": "ZookeeperNodeClientPort"},
        "GroupId": {"Ref": "SecurityGroupZookeeperClientPort"},
        "IpProtocol": "TCP",
        "ToPort": {"Ref": "ZookeeperNodeClientPort"}
      }
    },
    "Subnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC1"
        },
        "AvailabilityZone": "eu-north-1a",
        "CidrBlock": "10.0.0.0/24",
        "Tags": [
          {
            "Key": "Name",
            "Value": "subnet-1"
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "Environment"
            }
          }
        ]
      }
    },
    "Subnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC1"
        },
        "AvailabilityZone": "eu-north-1b",
        "CidrBlock": "10.0.1.0/24",
        "Tags": [
          {
            "Key": "Name",
            "Value": "subnet-2"
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "Environment"
            }
          }
        ]
      }
    },
    "Subnet3": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC1"
        },
        "AvailabilityZone": "eu-north-1c",
        "CidrBlock": "10.0.2.0/24",
        "Tags": [
          {
            "Key": "Name",
            "Value": "subnet-3"
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "Environment"
            }
          }
        ]
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "InternetGatewayVPC1"
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "Environment"
            }
          }
        ]
      }
    },
    "InternetGatewayAttachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        },
        "VpcId": {
          "Ref": "VPC1"
        }
      }
    },
    "RouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC1"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "RouteTable"
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "Environment"
            }
          }
        ]
      }
    },
    "RouteToInternetGateway": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        },
        "RouteTableId": {
          "Ref": "RouteTable"
        }
      }
    },
    "Subnet1ToInternetGateway": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "Subnet1"
        },
        "RouteTableId": {
          "Ref": "RouteTable"
        }
      }
    },
    "Subnet2ToInternetGateway": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "Subnet2"
        },
        "RouteTableId": {
          "Ref": "RouteTable"
        }
      }
    },
    "Subnet3ToInternetGateway": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "Subnet3"
        },
        "RouteTableId": {
          "Ref": "RouteTable"
        }
      }
    },
    "Ec2LaunchTemplate": {
      "Type": "AWS::EC2::LaunchTemplate",
      "Properties": {
        "LaunchTemplateName": {
          "Ref": "Ec2LaunchTemplateName"
        },
        "LaunchTemplateData": {
          "TagSpecifications": [
            {
              "ResourceType": "instance",
              "Tags": [
                {
                  "Key": "Environment",
                  "Value": {
                    "Ref": "Environment"
                  }
                }
              ]
            }
          ],
          "EbsOptimized": false,
          "ImageId": "ami-5e9c1520",
          "KeyName": "ec2-demo-2",
          "Monitoring": {
            "Enabled": false
          },
          "Placement": {
            "GroupName": "",
            "Tenancy": "default"
          },
          "CapacityReservationSpecification": {
            "CapacityReservationPreference": "none"
          },
          "HibernationOptions": {
            "Configured": false
          }
        }
      }
    },
    "Route53PrivateHostedZone": {
      "Type": "AWS::Route53::HostedZone",
      "Properties": {
        "HostedZoneConfig": {
          "Comment": "Private hosted zone for zookeepers.demo."
        },
        "Name": {
          "Ref": "Route53PrivateHostedZoneName"
        },
        "VPCs": [
          {
            "VPCId": {
              "Ref": "VPC1"
            },
            "VPCRegion": {
              "Ref": "AWS::Region"
            }
          }
        ],
        "HostedZoneTags": [
          {
            "Key": "Environment",
            "Value": {
              "Ref": "Environment"
            }
          }
        ]
      }
    }
  },
  "Outputs": {
    "VpcId": {
      "Description": "The VPC ID Created",
      "Value": {
        "Ref": "VPC1"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-VpcZookeepersId"
        }
      }
    },
    "Subnet1": {
      "Description": "The subnet1 of the VPC.",
      "Value": {
        "Ref": "Subnet1"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-Subnet1"
        }
      }
    },
    "Subnet2": {
      "Description": "The subnet1 of the VPC.",
      "Value": {
        "Ref": "Subnet2"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-Subnet2"
        }
      }
    },
    "Subnet3": {
      "Description": "The subnet1 of the VPC.",
      "Value": {
        "Ref": "Subnet3"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-Subnet3"
        }
      }
    },
    "SecurityGroup1": {
      "Description": "The security group that will be used to bind EC2 instance network interface.",
      "Value": {
        "Ref": "SecurityGroup1"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-SecurityGroup"
        }
      }
    },
    "SecurityGroupZookeeperElectionAndLeaderPorts": {
      "Description": "The security group that will be used to bind EC2 instance network interface, for election and leader ports.",
      "Value": {
        "Ref": "SecurityGroupZookeeperElectionAndLeaderPorts"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-SecurityGroupZookeepersElectionAndLeaderPorts"
        }
      }
    },
    "SecurityGroupZookeeperClientPort": {
      "Description": "The security group that will be used to bind EC2 instance network interface, for zookeeper client ports.",
      "Value": {
        "Ref": "SecurityGroupZookeeperClientPort"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-SecurityGroupZookeepersClientPort"
        }
      }
    }
  }
}
